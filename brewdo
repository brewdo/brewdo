#!/usr/bin/env ruby
#
# Copyright (c) 2014, 2015, 2016 Matt Behrens.
# Copyright (c) 2018 Alexander Regueiro.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

HOMEBREW_USER = '_homebrew'
HOMEBREW_HOME = '/usr/local'
HOMEBREW_LOGS = '/var/log/homebrew'
HOMEBREW_CACHE = '/Library/Caches/Homebrew'

require 'colorize'
require 'find'
require 'fileutils'
require 'etc'

def prompt(default, *args)
  print(*args)
  result = STDIN.gets.strip
  result.empty? ? default : result
end

# check the Homebrew owner account exists
def is_owner_present?
  begin
    Etc.getpwnam(HOMEBREW_USER)
    true
  rescue ArgumentError
    false
  end
end

# get Homebrew owner uid
def get_owner_uid
  Etc.getpwnam(HOMEBREW_USER).uid
end

# check that a directory is owned and writable by the Homebrew owner
def is_owned_writable_by_owner?(directory)
  stat = File.stat(directory)
  stat.uid == get_owner_uid and (stat.mode & 0700) == 0700
end

# check that the Homebrew home is owned and writable by the Homebrew
# owner
def is_home_owned_writable_by_owner?
  is_owned_writable_by_owner?(HOMEBREW_HOME)
end

# check that the Homebrew log directory is owned and writable by the
# Homebrew owner
def is_log_owned_writable_by_owner?
  is_owned_writable_by_owner?(HOMEBREW_LOGS)
end

# check that we are root
def is_root?
  Process.euid == 0
end

class RootRequiredError < StandardError
end

# require root
def require_root
  raise RootRequiredError.new('root required; try sudo') unless is_root?
end

# check to see if a uid is unused
def is_uid_unused?(uid)
  begin
    Etc.getpwuid(uid)
  rescue ArgumentError
    return true
  end
  false
end

# check to see if a gid is unused
def is_gid_unused?(gid)
  begin
    Etc.getgrgid(gid)
  rescue ArgumentError
    return true
  end
  false
end

# find an unused uid and matching gid suitable for the Homebrew owner,
# or nil if no suitable uid can be found
def find_unused_uid
  500.downto(1) do |uid|
    return uid if is_uid_unused?(uid) and is_gid_unused?(uid)
  end
  return nil
end

class OwnerExistsError < StandardError
end

class NoFreeUidError < StandardError
end

# execute a dscl command, raising an error on failure
def dscl(*args)
  unless system(['/usr/bin/dscl', 'dscl'], '/Local/Default', *args)
    raise ArgumentError.new('dscl /Local/Default ' + args.join(' '))
  end
end

# calculate directory service record paths
def record_paths
  ['/Groups/' + HOMEBREW_USER, '/Users/' + HOMEBREW_USER]
end

# add the Homebrew owner account, raising an error on failure
def cmd_adduser
  require_root
  if is_owner_present?
    while true
      rep = prompt('A', 'Homebrew owner account exists. Abort (A), ignore (i), or recreate (r)? ')
      case rep.downcase()
      when 'a'
        raise OwnerExistsError.new('owner account exists')
      when 'i'
        return
      when 'r'
        cmd_deluser
      else
        next
      end
      break
    end
  end

  uid = find_unused_uid
  raise NoFreeUidError.new('no free uid for owner account') if uid == nil

  group_path, user_path = record_paths

  dscl('-create', group_path)
  [
    ['Password', '*'],
    ['PrimaryGroupID', uid.to_s],
    ['RealName', 'Homebrew Owner'],
  ].each do |pair|
    dscl('-create', group_path, pair[0], pair[1])
  end

  dscl('-create', user_path)
  [
    ['NFSHomeDirectory', HOMEBREW_HOME + '/brewdo'],
    ['Password', '*'],
    ['PrimaryGroupID', uid.to_s],
    ['RealName', 'Homebrew Owner'],
    ['UniqueID', uid.to_s],
    ['UserShell', '/usr/bin/false'],
  ].each do |pair|
    dscl('-create', user_path, pair[0], pair[1])
  end

  ['AuthenticationAuthority', 'PasswordPolicyOptions'].each do |key|
    dscl('-delete', user_path, key)
  end
end

# delete homebrew owner account, raising an error on failure
def cmd_deluser
  require_root

  group_path, user_path = record_paths

  dscl('-delete', group_path)
  dscl('-delete', user_path)
end

# does this directory exist?
def dir_exists?(dirname)
  File.exists?(dirname) and File.directory?(dirname)
end

# create Homebrew home
def create_homebrew_home
  require_root

  # `/usr/local` generally exists, so it should not be a failure if it
  # does
  Dir.mkdir(HOMEBREW_HOME) unless dir_exists?(HOMEBREW_HOME)
  uid = get_owner_uid
  File.chown(uid, nil, HOMEBREW_HOME)
end

# create Homebrew log directory
def create_homebrew_log
  require_root

  Dir.mkdir(HOMEBREW_LOGS) unless Dir.exist?(HOMEBREW_LOGS)
  uid = get_owner_uid
  File.chown(uid, nil, HOMEBREW_LOGS)
  File.chmod(0755, HOMEBREW_LOGS)
end

# create Homebrew cache directory
def create_homebrew_cache
  require_root

  Dir.mkdir(HOMEBREW_CACHE) unless Dir.exist?(HOMEBREW_CACHE)
  uid = get_owner_uid
  File.chown(uid, nil, HOMEBREW_CACHE)
  File.chmod(0755, HOMEBREW_CACHE)
end

class GitCloneError < StandardError
end

# run a Homebrew command
def cmd_brew(*args)
  brew_bin = HOMEBREW_HOME + '/bin/brew'

  if args.length == 0
    args = ['help']
  end

  # some Homebrew commands can be called directly
  if [
    '--cellar',
    '--env',
    '--help',
    '--prefix',
    '--repository',
    'config',
    'help',
    'home',
    'info',
    'list',
    'options',
    'outdated',
    'search',
  ].member?(args[0]) or (args[0] == 'doctor' and args[1] == '--list-checks')
    system([brew_bin, 'brew'], *args)
    return $?.to_i >> 8
  else
    return cmd_do(brew_bin, *args)
  end
end

# run an arbitrary command inside the brewdo sandbox
def cmd_do(*args)
  brewdo_bin = File.expand_path($0)

  system(
    ['/usr/bin/sudo', 'sudo'], '-u', HOMEBREW_USER, '-H',
    brewdo_bin, '_do', *args
  )
  return $?.to_i >> 8
end

# run an arbitrary command with environment etc.; intended to be run
# inside the sandbox
def cmd__do(*args)
  begin
    Dir.chdir(Dir.pwd)
  rescue Errno::EACCES
    Dir.chdir('/')
  end

  temp_home = `/usr/bin/mktemp -dt brewdo`.chop
  at_exit do
    FileUtils.remove_entry_secure(temp_home)
  end

  ENV['HOME'] = temp_home
  ENV['HOMEBREW_CACHE'] = HOMEBREW_CACHE
  ENV['HOMEBREW_LOGS'] = HOMEBREW_LOGS
  system(*args)
  return $?.to_i >> 8
end

# make home and log directories
def cmd_mkdirs
  require_root

  create_homebrew_log
  create_homebrew_cache
  create_homebrew_home
end

# make log directory only
def cmd_mklogdir
  require_root

  create_homebrew_log
end

# clone Homebrew into Homebrew home
def cmd_clone
  raise GitCloneError.new('Homebrew clone failed') unless system(
    ['/usr/bin/sudo', 'sudo'], '-u', HOMEBREW_USER,
    '/usr/bin/git', 'clone', 'https://github.com/Homebrew/homebrew.git',
    HOMEBREW_HOME
  )
end

# set up Homebrew with brewdo
def cmd_install
  cmd_adduser
  cmd_mkdirs
  cmd_clone

  puts <<-EOT
NOTE: if you are a Homebrew Cask user, the `_homebrew` user created by brewdo
needs to have a password in order for casks to perform installation actions
as the superuser. Run `passwd _homebrew` as root to set a password.
  EOT
  .bold
end

# switch from an existing Homebrew installation to brewdo
def cmd_switch
  cmd_adduser
  cmd_mklogdir
  cmd_migrate
end

# check brewdo setup
def cmd_doctor
  err = 0

  unless is_owner_present?
    puts 'Homebrew owner ' + HOMEBREW_USER + ' not present on system'
    err = 1
  end

  unless is_home_owned_writable_by_owner?
    puts HOMEBREW_HOME + ' not owned/writable by ' + HOMEBREW_USER
    err = 1
  end

  unless is_log_owned_writable_by_owner?
    puts HOMEBREW_LOGS + ' not owned/writable by ' + HOMEBREW_USER
    err = 1
  end

  return err
end

# determine ownership of a given file
def file_owner(pathname)
  stat = File.lstat(pathname)
  return stat.uid, stat.gid
end

class AlreadySwitchedError < StandardError
end

# switch ownership/groups recursively on HOMEBREW_HOME, HOMEBREW_CACHE
def switch_owners(new_user, new_home_group, new_cache_group)
  home_uid, home_gid = file_owner(HOMEBREW_HOME + '/Homebrew')
  cache_uid, cache_gid = file_owner(HOMEBREW_CACHE)
  new_home_uid = Etc.getpwnam(new_user).uid
  new_home_gid = Etc.getgrnam(new_home_group).gid
  new_cache_gid = Etc.getgrnam(new_cache_group).gid

  if home_uid == new_home_uid
    raise AlreadySwitchedError.new('already switched owners')
  end

  homebrew_dirs = [
    'Cellar',
    'Caskroom',
    'Homebrew',
    'Frameworks',
    'bin',
    'etc',
    'include',
    'lib',
    'libexec',
    'opt',
    'sbin',
    'share',
    'var',
  ].map { |dir| HOMEBREW_HOME + '/' + dir }
  homebrew_dirs += Dir.glob(HOMEBREW_HOME + '/man*')

  Find.find(*homebrew_dirs, HOMEBREW_CACHE) do |pathname|
    uid, gid = file_owner(pathname)
    if (uid == home_uid and gid == home_gid) or pathname == HOMEBREW_CACHE
      File.lchown(new_home_uid, new_home_gid, pathname)
    end
  end
end

# migrate from an existing user to HOMEBREW_USER
def cmd_migrate
  switch_owners(HOMEBREW_USER, 'wheel', 'admin')
  File.chmod(0755, HOMEBREW_HOME) rescue nil
  File.chmod(0755, HOMEBREW_CACHE)
end

# revert from HOMEBREW_USER to a "normal" use
def cmd_unmigrate(username)
  switch_owners(username, 'admin', 'admin')
  File.chown(0, nil, HOMEBREW_HOME) rescue nil
  File.chmod(0775, HOMEBREW_HOME) rescue nil
  File.chown(0, nil, HOMEBREW_CACHE)
  File.chmod(0775, HOMEBREW_CACHE)
end

cmd_args = ARGV[1, ARGV.length - 1]

case ARGV[0]

when 'brew'
  exit cmd_brew(*cmd_args)

when 'do'
  exit cmd_do(*cmd_args)

when '_do'
  exit cmd__do(*cmd_args)

when 'install'
  cmd_install

when 'switch'
  cmd_switch

when 'doctor'
  exit cmd_doctor

when 'adduser'
  cmd_adduser

when 'deluser'
  cmd_deluser

when 'mkdirs'
  cmd_mkdirs

when 'mklogdir'
  cmd_mklogdir

when 'clone'
  cmd_clone

when 'migrate'
  cmd_migrate

when 'unmigrate'
  cmd_unmigrate(*cmd_args)

else
  puts <<-EOT
usage: brewdo brew COMMAND [ARGS [ARGS]...]
       brewdo do COMMAND [ARGS [ARGS]...]
       sudo brewdo install
       sudo brewdo switch
       brewdo doctor
       sudo brewdo adduser | deluser
       sudo brewdo mkdirs
       sudo brewdo mklogdir
       brewdo clone
       sudo brewdo migrate
       sudo brewdo unmigrate USERNAME
  EOT
end

# vim: tabstop=8 expandtab shiftwidth=2 softtabstop=2
